### SERVER Setup
- mkdir zoom && cd zoom 
- npm init -y 
- touch README.md
- npm i nodemon -D
- babel.config.json && nodemon.json 파일 생성 
- src폴더 생성 및 server.js 파일 생성 
- git init  
- npm i @babel/core @babel/cli @babel/node -D
- touch .gitignore (node_modules추가)
- nodemon.json => "exec": "babel-node src/server.js"
- babel.config.json =>  "presets" : ["@babel/preset-env"]
- npm i @babel/preset-env -D
- package.json 스크립트 추가 => "scripts": {"dev": "nodemon"},
- npm i express pug  

### FRONT Setup
- app.set("view engine", "pug");
- app.set("views", __dirname + "/src/views");
- app.get("/", (req, res) => res.render("home"));
- app.use("/public", express.static(__dirname + "/public"));
- MVP CSS import
- <link rel="stylesheet" href="https://unpkg.com/mvp.css">
- server.js는 Backend에서 구동될거고 app.js는 FrontEnd에서 구동된다. 
- express.static은 유저에게 /public으로 가면 public폴더를 볼수 있도록 허용하는것이다. 

### Websocket
- HTTP vs WebSocket 둘다 모두 프로토콜이다. 
- 인터넷 전체가 http를 기반으로 만들어져있다.
- http는 stateless이다. 유저와 서버사이에 아무런 연결이 없다. 서버는 유저가 누구인지 잊어버린다.
- webSocket연결이 일어날땐 마치 악수처럼 작동한다. 
- 브라우저가 서버로 webSocket request를 보내면, 서버가 받거나 거절한다. 
- 브라우저와 서버가 서로 커뮤니케이션하는 터널이다. (bi-directional connection 양방향 연결)
- 서버는 브라우저에게 어떤때나 메세지를 보낼수 있다.   
- 브라우저에는 내장된 webSocket API가 있다. 
- WebSocket은 어떤 프로그래밍 언어에 국한되어 있지않다. 그저 protocol일뿐 
- real-time으로 소통하는 2개의 서버 사이에서도 작동한다. 
- protocol은 어떤 사람들이 어딘가에 있는 방에서 만나고 어떻게 일들이 진행될지를 결정한다. 어떻게 모든것이 돌아가야할지에 대한 규칙을 만든다. 그런 다음, 프로그래머는 이 규칙을 가지고 이 규칙을 따르는 코드를 만들어서 실행한다. 
- ws는 webSocket protocol을 실행하는 package이다. 
- 채팅방은 ws에 포함되어 있지 않다. 채팅방이 webSocket protocol의 일부분이 아니기 때문이다. 
- 채팅방을 위해서는 ws로 만든 framework를 사용하면 된다. 
- ws는 webSocket의 core(핵심)이다. (완전 기초가 되는 밑바탕)
- npm i ws
- WebSocket도 event가 있고, event가 발동될때 사용할 function을 만들면 된다. 
- webSocket은 listen할 특정한 event명이 있다. 
- socket은 연결된 어떤 사람이다. 연결된 브라우저와의 contact라인이다. 
- socket을 이용하면 메세지를 주고 받을수 있다.
- wss.on("connection")에서 on 메소드는 event가 발동하는걸 기다린다. 여기서 event는 connection이다. 
- on 메소드는 socket에서 백엔드에 연결된 사람의 정보를 제공해준다. 
- webSocket은 브라우저와 서버사이의 연결이다. 
- server.js의 socket은 연결된 브라우저를 뜻한다. 
- app.js의 socket은 서버로의 연결을 뜻한다. 
- socket.send()에서 JSON형태로 보내게 되면 서버에서는 stringify된 JSON을 JSON.parse로 받아야한다.
- 백엔드로 javascript object를 보내면 좋지 않다. 연결하고 싶은 백엔드와 프런트가 javascript서버가 아닐수도 있기 때문이다. Java, Go서버일수도 있다. 

### Socket.IO
- socket.IO는 실시간, 양방향, event 기반의 통신을 가능하게한다.
- Socket.IO는 framework인데 Websocket보다 탄력성이 뛰어나다.
- Socket.IO는 webSocket의 부가기능이 아니다. 
- 만약 webSocket 이용이 불가능하면, Socket.IO는 다른 방법을 이용해서 계속 작동한다.
- 만약 webSocket 연결을 할수 없는 경우 HTTP long polling을 사용한다.
- Socket.IO는 우리에게 신뢰성을 준다. 즉, 브라우저가 webSocket 지원을 안하거나 webSocket 연결에 문제가 있거나 회사에서 webSocket 사용이 안되는 경우나 Firewall 혹은 proxy가 있거나 등등 어떤 경우에든 Socket.IO는 실시간 기능을 제공해준다. 
- Socket.IO는 프런트와 백엔드 간 실시간 통신을 가능하게 해주는 프레임워크 또는 라이브러리이다. 
- npm i socket.io
- 브라우저에도 Socket.IO설치를 해야한다. 브라우저가 주는 webSocket은 Socket.IO와 호환이 되지 않고 Socket.IO가 더 많은 기능을 주기 때문이다. 
- script(src="/socket.io/socket.io.js") => HTML에 해당 script를 넣으면 Socket.IO설치가 된다. 
- const socket = io();에서 io function은 알아서 socket.io를 실행하고 있는 서버를 찾는다. 
- socket.IO에는 이미 room의 기능이 있다. 
- socket.IO는 특정한 event를 emit할수 있다.(어떤 이름이든 상관없다)
- 또한 object를 전송할수 있다.
- <webSocket보다 개선된점> 
- 1. 어떤 event든지 전송할수있다. webSocket에서는 event이름이 message만 가능 (이벤트의 이름을 맘대로 정할수있다)
- 2. javascript object를 전송할수있다. webSocket에서는 JSON.stringify해야함
- 3. socket.emit의 마지막 argument로 callback function을 넣을수 있다.
- socket.emit()의 첫번째 인자는 event이름, 두번째 인자는 보내고 싶은 payload, 마지막 인자는 서버에서 호출하는 function을 넣을수있다. 
- 마지막 인자에 들어가는 function은 서버에서 호출하고 프런트에서 실행한다. 
- 4. webSocket에서는 text만 전송할수 있었지만 socket.IO에서는 어떤것이든 보낼수 있다.(무한정 argument로 보낼수있다)
- chat Room을 만들기 위해서는 socket.join()에 room의 이름을 입력하면된다. 
- user의 id는 user가 있는 방의 id와 같다.(socket.id)
- socketIO에서 socket은 기본적으로 User와 서버사이에 private room이 있다.
- socket.on("disconnecting")에서 disconnect는 연결이 완전히 끊어졌다는 의미이지만 disconnecting은 유저가 접속을 중단할 것이지만 아직 방을 완전히 나가지는 않은것이다.
- disconnecting event는 socket이 방을 떠나기 바로 직전에 발생한다. 
- Adapter가 기본적으로 하는 일은 다른 서버들 사이에 실시간 어플리케이션을 동기화하는것이다. 
- 지금은 서버의 메모리에서 Adapter를 사용하고 있다. (데이터베이스에는 아무것도 저장하고 있지 않다)
- 앱안에 많은 클라이언트가 있을때, 모든 클라이언트에 대해서 connection을 열어놓아야한다. 
- 즉 서버에는 많은 connection이 들어온다는 것이다. 이때쯤이면 서버를 2,3개 사용하게 될수있다.
- 지금 서버 메모리에서 Adapter를 사용하고 있는데 그 말은 우리가 만든 3개의 서버같은 memory pool을 공유하지 않는다. 
- 우리가 Adapter를 사용하지 않는다면 먄약 서버A에 있는 클라이언트가 서버B에 있는 클라이언트에 메세지를 보내고 싶다면 그건 불가능하다(두 서버는 분리되어 있기때문에)
- Adapter는 에플리케이션으로 통하는 창문이다. 
- Adapter는 누가 연결되었는지, 현재 어플리케이션에 room이 얼마나 있는지 알려준다. 
- socket의 ID를 뜻하는 sids를 가져와서 room들을 보고 이 방들이 어떤 socket을 위해서 만들어졌는지 확인해야한다. (sids로 되어있는 private room과 public room이 나뉘어져 있다)
- 만약 room ID를 socket ID에서 찾을 수 있다면 우리가 Private용 room을 찾은것이다. 
- 이 부분을 하기 위해서는 Map 데이터 구조를 봐야한다. Map은 object 같은건데, unique keys가 있다. 
- 우리가 하고 싶은건 모든 sids에 대한 map을 만드는 것이다. 

```javascript
const food = new Map()
>> undefined
food
>> Map(0) {size: 0}
food.set("pizza",12)
>> Map(1) {'pizza' => 12}
food.get("pizza")
>> 12
food.get('lalalal')
>> undefined

sids
>> Map(2) {'wRdmDtBaP6dKU4xCAAAH' => true, '9y9z9aJGfNWtQQKBAAAJ' => true}
rooms
>> Map(3) {'wRdmDtBaP6dKU4xCAAAH' => true, '9y9z9aJGfNWtQQKBAAAJ' => true, 'room#1' => true}
rooms.forEach((value, key) => console.log(value, key))
>>> true 'wRdmDtBaP6dKU4xCAAAH'
>>> true '9y9z9aJGfNWtQQKBAAAJ'
>>> true 'room#1'
rooms.forEach((_,key) => {
    if(sids.get(key) === undefined){
        console.log(key)
    }
})
>> room#1
```
- set은 array 같은건데 item들이 unique하다. 
```javascript
const food = new Set(["pizza","love", "love"])
undefined
food
Set(2){'pizza', 'love'}
food.size
2
```

- Socket.IO Admin Panel 
- npm i @socket.io/admin-ui
- https://admin.socket.io
- Server URL: http://localhost:4000/admin

### Video Chat 
- video 태그의 playinline 속성은 모바일 브라우저가 필요로하는 속성이다. 가끔 모바일 기기로 비디오를 재생할때, 그 비디오는 전체화면이 되어버린다. playinline을 해주면 비디오는 전체화면이 되지 않는다. 대신에 오직 웹사이트에서만 실행이 된다. 
- stream은 비디오와 오디오가 결합된것이다. 
- navigator.mediaDevices.getUserMedia(constraints)에서 constraints는 기본적으로 우리가 무엇을 얻고 싶은지에 대한것이다. 
- stream의 멋진 점은 우리에게 track이라는 것을 제공해준다. 비디오, 오디오, 자막이 각각 하나의 track이 될수 있다. 
- navigator.mediaDevices.enumerateDevices()는 컴퓨터나 모바일이 가지고 있는 모든 장치와 미디어 장치를 알려준다.   
- webRTC는 web Real-Time Communication을 뜻한다. (실시간 커뮤니케이션을 가능하게 해주는 기술)
- SocketIO는 내가 메세지를 보낼때 바로 너에게 보내는것이 아니라 서버에게 메세지를 보내고 그 서버가 너에게 메세지를 보내는것이기 때문에 peer-to-peer가 아니다. 이건 그냥 서버에 연결되어 있을뿐이고 어떤 사람이 보낸 메세지를 우리에게 보내주는건 "서버"이다. 
- webRTC가 있으면 peer-to-peer 커뮤니케이션이 가능하다. 
- 즉, 내 영상과 오디오와 텍스트가 서버로 가지 않는다는 뜻이다. (서버가 필요없다) 이게 바로 실시간(real time)이 속도가 엄청 빠른 이유이다. 
- 브라우저가 브라우저에 직접 연결이 되어 영상과 오디오, 텍스트가 전달이된다.
- 나의 브라우저로 하여금 서버가 상대가 어디에 있는지 알게해야한다. 브라우저는 서버에게 configuration과 브라우저 위치만 전달한다.
- 서버가 영상과 오디오를 처리하는게 아니라 다른 사람이 어디에 있는지 알려줄뿐이다.
- 브라우저들이 따로 설정이 이루어지고 SocketIO를 통해서 이어준다. 
- 영상과 오디오 데이터를 주고 받을때 그 영상의 오디오와 영상 데이터들을 peer connection에 넣어야한다. 
- const offer = myPeerConnection.createOffer()의 offer는 다른 브라우저가 참가할수 있도록 초대장을 만드는 것이다. 
- setLocalDescription은 브라우저가 offer를 가지면 그 offer로 연결을 구성해야한다.
- Peer A는 offer를 생성하고 setLocalDescription을 하고 Peer B로 그 offer를 보낸다. 
- 오디오와 영상을 주고 받을때 서버가 필요하지 않다. 그러나 offer를 주고 받기 위해서는 서버가 필요하다. offer가 주고 받아진 순간, 우리는 직접적으로 대화를 할수 있다.
- setRemoteDescription()은 offer를 받은 peer의 description을 세팅한다는것을 의미한다. 
- webSocket의 속도가 media를 가져오는 속도나 연결을 만드는 속도보다 빠르다. Socket.on보다 먼저 getMedia()와 makeConnection()를 실행시켜야한다.  